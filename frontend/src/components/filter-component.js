import React, { useEffect, useState, useContext } from "react"
import "../styles/filter.css"
import Product from "../components/product"
import ProductModal from "./product-modal"
import Checkbox from "../components/checkbox"
import StoreContext from "../util/store"
import { useStaticQuery, graphql } from "gatsby"

const FilterComponent = () => {
  /*
  const data = useStaticQuery(graphql`
    {
      allShopifyCollection{
        nodes {
          shopifyId
          title
          descriptionHtml
          image {
            altText
            src
            localFile {
              childImageSharp {
                fluid {
                  ...GatsbyImageSharpFluid
                }
              }
            }
          }
          internal {
            content
            description
            ignoreType
            mediaType
          }
          products {
            title
            shopifyId
            onlineStoreUrl
            descriptionHtml
            availableForSale
            totalInventory
            images {
              altText
              originalSrc
            }
            priceRange {
              maxVariantPrice {
                amount
                currencyCode
              }
              minVariantPrice {
                currencyCode
                amount
              }
            }
            productType
            tags
            variants {
              title
              id
              selectedOptions {
                name
                value
              }
              priceV2 {
                amount
                currencyCode
              }
              image {
                altText
                originalSrc
                localFile {
                  childImageSharp {
                    fluid {
                      ...GatsbyImageSharpFluid
                    }
                  }
                }
              }
              availableForSale
              quantityAvailable
              selectedOptions {
                name
                value
              }
            }
          }
        }
      }
    }
  `)
  

const ITEMS_TO_SHOW = 100
const [modalShow, setModalShow] = useState("")
const [ptActive, setPtActive] = useState()
const [ctActive, setCtActive] = useState()
const { sortedData, setSortedValue } = useContext(StoreContext)
const [collectionData, setCollectionData] = useState(data.allShopifyCollection.nodes)
const [productsShown, setProductsShown] = useState([])
const [productTypeFilter, setProductTypeFilter] = useState("")
const [collectionTypeFilter, setCollectionTypeFilter] = useState("")
const [productShow, setProductShow] = useState(true);
// NEEDS USEEFFECT To have props passed if coming from a collection or product type search to set the state
// for filter options so that they are selected
useEffect(() => {
  setProductsShown(PRODUCT_LIST_ITEMS)
  if (handleCollectionTypeButton) {
    return setProductsShown(COLLECTION_LIST_ITEMS)
  }
}, [])
// NEEDS CLEAR RESULTS BUTTON

// NEEDS Search Button to work on filter page
let filterParams = new Set()

const handleModalShow = e => {
  setModalShow(e)
  setProductShow(false)
}
let sortedDataArray = []
if (sortedData != null) {
  sortedDataArray = [...sortedData]
}

//filters sorted data to include/match product type
const filterByProductType = sortedDataArray.filter(product =>
  product.productType.includes(productTypeFilter)
)
//filters shopify collections to include/match collection type

//filters shopify collections to include/match collection type
const filterByCollectionType = collectionData.filter(collection =>
    collection.title.includes(collectionTypeFilter)
  )

//generates products from different collection types
let collectionProductsItemsGenerate = i => {
  return i.map(objs =>
    objs.products.map(product => (
      <div key={product.shopifyId}>
        <Product productInfo={product} handleModalShow={handleModalShow} />
      </div>
    ))
  )
}

//rendered to show products generated by collection type
let COLLECTION_LIST_ITEMS = collectionProductsItemsGenerate(
  filterByCollectionType
)

// Creates array of product components with length of ITEMS_TO_SHOW amount
let productListItemsGenerate = i => {
  if (i !== {}) {
    return i.slice(0, ITEMS_TO_SHOW).map(product => (
      <div key={product.shopifyId}>
        <Product productInfo={product} handleModalShow={handleModalShow} />
      </div>
    ))
  }
}
//rendered to show products filtered by product type
let PRODUCT_LIST_ITEMS = productListItemsGenerate(filterByProductType)

//handles active toggle buttons
let handlePtToggle = e => {
  if (ptActive === e.target.value) {
    setPtActive(null)
  } else {
    setPtActive(e.target.value)
  }
}
let handleCtToggle = e => {
  if (ctActive === e.target.value) {
    setCtActive(null)
  } else {
    setCtActive(e.target.value)
  }
}
let handleCheck = (e, checked) => {
  if (checked) {
    filterParams.add(e)
  } else if (filterParams.has(e)) {
    filterParams.delete(e)
  }
}

//onclick functions for Product Type buttons
const handleProductTypeButton = e => {
  handlePtToggle(e)
  if (productTypeFilter === e.target.getAttribute("data-name")) {
    setProductTypeFilter("")
  } else {
    setProductTypeFilter(e.target.getAttribute("data-name"))
  }
}

//onclick functions for Collection Type buttons
const handleCollectionTypeButton = e => {
  handleCtToggle(e)
  if (collectionTypeFilter === e.target.getAttribute("data-name")) {
    setCollectionTypeFilter("")
  } else {
    setCollectionTypeFilter(e.target.getAttribute("data-name"))
  }
}

return(
    <section className="filter-container">
        <div className="filter-sidebar">
          <button className="clearfilter">
            <svg className="svg-icon" viewBox="0 0 20 20">
              <path
                stroke="white"
                strokeWidth="2"
                fill="none"
                d="M15.898,4.045c-0.271-0.272-0.713-0.272-0.986,0l-4.71,4.711L5.493,4.045c-0.272-0.272-0.714-0.272-0.986,0s-0.272,0.714,0,0.986l4.709,4.711l-4.71,4.711c-0.272,0.271-0.272,0.713,0,0.986c0.136,0.136,0.314,0.203,0.492,0.203c0.179,0,0.357-0.067,0.493-0.203l4.711-4.711l4.71,4.711c0.137,0.136,0.314,0.203,0.494,0.203c0.178,0,0.355-0.067,0.492-0.203c0.273-0.273,0.273-0.715,0-0.986l-4.711-4.711l4.711-4.711C16.172,4.759,16.172,4.317,15.898,4.045z"
              ></path>
            </svg>
            <div>Clear Filter</div>
          </button>
          <div className="filter-product-type">
            <h4>Product Type</h4>
            <div className="list-item active">
              <div>
                <span
                  className={"fm" === ptActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                value="fm"
                data-name="Face Cover"
                onClick={handleProductTypeButton}
                className="filter-option"
              >
                Face Cover
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"gt" === ptActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                value="gt"
                data-name="Neck Gaiter"
                onClick={handleProductTypeButton}
                className="filter-option"
              >
                Gaiter
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"ppe" === ptActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                value="ppe"
                data-name="PPE"
                onClick={handleProductTypeButton}
                className="filter-option"
              >
                PPE
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"wl" === ptActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                value="wl"
                data-name="Wellness"
                onClick={handleProductTypeButton}
                className="filter-option"
              >
                Wellness
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"bo" === ptActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                value="bo"
                data-name="Botanics"
                onClick={handleProductTypeButton}
                className="filter-option"
              >
                Botanics
              </button>
            </div>
          </div>
          <div className="filter-collection-type">
            <h4>Collections</h4>
            <div className="list-item active">
              <div>
                <span
                  className={"ap" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="All Products"
                value="ap"
                onClick={handleCollectionTypeButton}
                className="filter-option"
              >
                All Products
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"na" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="New Arrivals"
                value="na"
                onClick={handleCollectionTypeButton}
                className="filter-option"
              >
                New Arrivals
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"mp" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="Most Popular"
                value="mp"
                onClick={handleCollectionTypeButton}
                className="filter-option"
              >
                Most Popular
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"fs" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="Flash Sale"
                value="fs"
                onClick={handleCtToggle}
                className="filter-option"
              >
                Flash Sale
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"gi" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="Gift Ideas"
                value="gi"
                onClick={handleCollectionTypeButton}
                className="filter-option"
              >
                Gift Ideas
              </button>
            </div>
            <div className="list-item active">
              <div>
                <span
                  className={"b" === ctActive ? "active" : "nActive"}
                ></span>
              </div>
              <button
                data-name="Bundles"
                value="b"
                onClick={handleCollectionTypeButton}
                className="filter-option"
              >
                Bundles
              </button>
            </div>
          </div>
          <div className="filter-size">
            <h4>Size</h4>
            <span className="filter-option">Adult</span>
            <div className="check-option">
              <Checkbox value="sm" handleCheck={handleCheck} />
              <span className="filter-option">Small</span>
            </div>
            <div className="check-option">
              <Checkbox value="md" handleCheck={handleCheck} />
              <span className="filter-option">Medium</span>
            </div>
            <div className="check-option">
              <Checkbox value="lg" handleCheck={handleCheck} />
              <span className="filter-option">Large</span>
            </div>
            <div className="check-option">
              <Checkbox value="xl" handleCheck={handleCheck} />
              <span className="filter-option">Extra Large</span>
            </div>
            <span className="filter-option">Child</span>
            <div className="check-option">
              <Checkbox value="ts" handleCheck={handleCheck} />
              <span className="filter-option">Ages 2-7</span>
            </div>
            <div className="check-option">
              <Checkbox value="et" handleCheck={handleCheck} />
              <span className="filter-option">Ages 8-12</span>
            </div>
          </div>
          <div className="filter-color">
            <h4>Colors</h4>
            <span className="filter-option">Color Boxes</span>
          </div>
           <div className="filter-mask-type">
          <h4>Face Cover</h4>
          <div className="check-option">
            <Checkbox value="ad" handleCheck={handleCheck} />
            <span className="filter-option">Adjustable</span>
          </div>
          <div className="check-option">
            <Checkbox value="na" handleCheck={handleCheck} />
            <span className="filter-option">Non-Adjustable</span>
          </div>
        </div> 
        </div>
        <div>
          {modalShow.availableForSale && (
                <ProductModal type1='product-modal-filter' type2='product-modal-inner' data={modalShow} setModalShow={setModalShow} setProductShow={setProductShow} />
                )}
        </div>
        
        <div className="filter-results" style={{ display: (productShow ? '' : 'none') }}>    
            {productsShown}</div>
      </section>
)

}

FilterComponent.defaultProps = {}

FilterComponent.propTypes = {}
*/}
export default FilterComponent
